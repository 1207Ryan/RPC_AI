#
# Autogenerated by Thrift Compiler (0.21.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec
from uuid import UUID

import sys

from thrift.transport import TTransport
all_structs = []


class SceneInfo(object):
    """
    Attributes:
     - scene_name
     - matched_component
     - layout_fragment

    """
    thrift_spec = None


    def __init__(self, scene_name = None, matched_component = None, layout_fragment = None,):
        self.scene_name = scene_name
        self.matched_component = matched_component
        self.layout_fragment = layout_fragment

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.scene_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.matched_component = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.layout_fragment = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SceneInfo')
        if self.scene_name is not None:
            oprot.writeFieldBegin('scene_name', TType.STRING, 1)
            oprot.writeString(self.scene_name.encode('utf-8') if sys.version_info[0] == 2 else self.scene_name)
            oprot.writeFieldEnd()
        if self.matched_component is not None:
            oprot.writeFieldBegin('matched_component', TType.STRING, 2)
            oprot.writeString(self.matched_component.encode('utf-8') if sys.version_info[0] == 2 else self.matched_component)
            oprot.writeFieldEnd()
        if self.layout_fragment is not None:
            oprot.writeFieldBegin('layout_fragment', TType.STRING, 3)
            oprot.writeString(self.layout_fragment.encode('utf-8') if sys.version_info[0] == 2 else self.layout_fragment)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.scene_name is None:
            raise TProtocolException(message='Required field scene_name is unset!')
        if self.matched_component is None:
            raise TProtocolException(message='Required field matched_component is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FirstAIChatRequest(object):
    """
    Attributes:
     - input_text
     - language
     - timestamp

    """
    thrift_spec = None


    def __init__(self, input_text = None, language = None, timestamp = None,):
        self.input_text = input_text
        self.language = language
        self.timestamp = timestamp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.input_text = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.language = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.timestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FirstAIChatRequest')
        if self.input_text is not None:
            oprot.writeFieldBegin('input_text', TType.STRING, 1)
            oprot.writeString(self.input_text.encode('utf-8') if sys.version_info[0] == 2 else self.input_text)
            oprot.writeFieldEnd()
        if self.language is not None:
            oprot.writeFieldBegin('language', TType.STRING, 2)
            oprot.writeString(self.language.encode('utf-8') if sys.version_info[0] == 2 else self.language)
            oprot.writeFieldEnd()
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.I64, 3)
            oprot.writeI64(self.timestamp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.input_text is None:
            raise TProtocolException(message='Required field input_text is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FirstAIChatResponse(object):
    """
    Attributes:
     - scene

    """
    thrift_spec = None


    def __init__(self, scene = None,):
        self.scene = scene

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.scene = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FirstAIChatResponse')
        if self.scene is not None:
            oprot.writeFieldBegin('scene', TType.STRING, 1)
            oprot.writeString(self.scene.encode('utf-8') if sys.version_info[0] == 2 else self.scene)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AIChatRequest(object):
    """
    Attributes:
     - input_text
     - language
     - timestamp

    """
    thrift_spec = None


    def __init__(self, input_text = None, language = None, timestamp = None,):
        self.input_text = input_text
        self.language = language
        self.timestamp = timestamp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.input_text = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.language = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.timestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AIChatRequest')
        if self.input_text is not None:
            oprot.writeFieldBegin('input_text', TType.STRING, 1)
            oprot.writeString(self.input_text.encode('utf-8') if sys.version_info[0] == 2 else self.input_text)
            oprot.writeFieldEnd()
        if self.language is not None:
            oprot.writeFieldBegin('language', TType.STRING, 2)
            oprot.writeString(self.language.encode('utf-8') if sys.version_info[0] == 2 else self.language)
            oprot.writeFieldEnd()
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.I64, 3)
            oprot.writeI64(self.timestamp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.input_text is None:
            raise TProtocolException(message='Required field input_text is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AIChatResponse(object):
    """
    Attributes:
     - reply_text
     - scenes
     - assemble_layout

    """
    thrift_spec = None


    def __init__(self, reply_text = None, scenes = None, assemble_layout = None,):
        self.reply_text = reply_text
        self.scenes = scenes
        self.assemble_layout = assemble_layout

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.reply_text = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.scenes = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = SceneInfo()
                        _elem5.read(iprot)
                        self.scenes.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.assemble_layout = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AIChatResponse')
        if self.reply_text is not None:
            oprot.writeFieldBegin('reply_text', TType.STRING, 1)
            oprot.writeString(self.reply_text.encode('utf-8') if sys.version_info[0] == 2 else self.reply_text)
            oprot.writeFieldEnd()
        if self.scenes is not None:
            oprot.writeFieldBegin('scenes', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.scenes))
            for iter6 in self.scenes:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.assemble_layout is not None:
            oprot.writeFieldBegin('assemble_layout', TType.STRING, 3)
            oprot.writeString(self.assemble_layout.encode('utf-8') if sys.version_info[0] == 2 else self.assemble_layout)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.reply_text is None:
            raise TProtocolException(message='Required field reply_text is unset!')
        if self.scenes is None:
            raise TProtocolException(message='Required field scenes is unset!')
        if self.assemble_layout is None:
            raise TProtocolException(message='Required field assemble_layout is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(SceneInfo)
SceneInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'scene_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'matched_component', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'layout_fragment', 'UTF8', None, ),  # 3
)
all_structs.append(FirstAIChatRequest)
FirstAIChatRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'input_text', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'language', 'UTF8', None, ),  # 2
    (3, TType.I64, 'timestamp', None, None, ),  # 3
)
all_structs.append(FirstAIChatResponse)
FirstAIChatResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'scene', 'UTF8', None, ),  # 1
)
all_structs.append(AIChatRequest)
AIChatRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'input_text', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'language', 'UTF8', None, ),  # 2
    (3, TType.I64, 'timestamp', None, None, ),  # 3
)
all_structs.append(AIChatResponse)
AIChatResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'reply_text', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'scenes', (TType.STRUCT, [SceneInfo, None], False), None, ),  # 2
    (3, TType.STRING, 'assemble_layout', 'UTF8', None, ),  # 3
)
fix_spec(all_structs)
del all_structs
